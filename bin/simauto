#!/bin/bash
# Run a batched simctl command for all simulators in sims-enabled

OPENSIM_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )/.." && pwd )"

SIMCTL="${OPENSIM_DIR}/bin/simctl"

mkdir -p "${OPENSIM_DIR}/var"

# We create this lock file when needing to suspend the watchdog
SIMAUTO_LOCK="${OPENSIM_DIR}/var/simauto.lock"
touch "${SIMAUTO_LOCK}"

# Seconds delay between inworld alert and actual shutdown
ALERT_DELAY=120

# Seconds delay after stopping (for a clean shutdown)
STOP_DELAY=120

# Seconds delay after starting (to space out autobackups)
START_DELAY=600

# Inworld warnings users get to see $ALERT_DELAY seconds before stopping or
# restarts. Note that you CAN'T use special characters such as \n (newline)
MSG_REGION_RESTART="ATTENTION: REGION RESTART - This region will be restarting within ${ALERT_DELAY} seconds. Please teleport elsewhere until we are back..."
MSG_REGION_STOP="ATTENTION: REGION MAINTENANCE - This region will be going down for maintenance within ${ALERT_DELAY} seconds. Please teleport elsewhere until we are back..."

show_help() {
    echo "Usage: `basename $0` [ start | stop | restart ]"
    echo "Starts or stops all simulators in ${OPENSIM_DIR}/sims-enabled"
}

do_start() {
    for simulator in $OPENSIM_DIR/sims-enabled/*; do
        simname=`basename $simulator`
        if [ -f "${simulator}/pid" ]; then
           if ps -p `cat "${simulator}/pid"` > /dev/null; then
               echo "[${simname}] Already running"
           else
               echo "[${simname}] Starting (${START_DELAY}s, unclean shutdown)"
               ${SIMCTL} start ${simname}
               sleep ${START_DELAY}
           fi
        else
           echo "[${simname}] Starting (${START_DELAY})"
           ${SIMCTL} start ${simname}
           sleep ${START_DELAY}
        fi
    done;
    echo "All sims have started."
}

do_stop() {
    # Phase 1: Alert
    for simulator in ${OPENSIM_DIR}/sims-enabled/*; do
        simname=`basename ${simulator}`
        if [ -f "${simulator}/pid" ]; then
           if ps -p `cat "${simulator}/pid"` > /dev/null; then
               echo "[${simname}] Sending inworld alert"
               ${SIMCTL} alert ${simname} "${MSG_REGION_STOP}"
           fi
        fi
    done;
    echo "Pausing (${ALERT_DELAY}s) before stopping"
    sleep ${ALERT_DELAY}
    # Phase 2: Stop
    for simulator in ${OPENSIM_DIR}/sims-enabled/*; do
        simname=`basename ${simulator}`
        if [ -f "${simulator}/pid" ]; then
           if ps -p `cat "${simulator}/pid"` > /dev/null; then
               echo "[${simname}] Stopping"
               ${SIMCTL} stop ${simname}
           else
               echo "[${simname}] Already offline (stale pid file)"
           fi
        else
           echo "[${simname}] Already offline"
        fi
    done;
    echo "Pausing (${STOP_DELAY}s) before killcheck"
    sleep ${STOP_DELAY}
    # Phase 3: Kill
    for simulator in ${OPENSIM_DIR}/sims-enabled/*; do
        simname=`basename ${simulator}`
        if [ -f "${simulator}/pid" ]; then
           if ps -p `cat "${simulator}/pid"` > /dev/null; then
               echo "[${simname}] Killing"
               ${SIMCTL} kill ${simname}
           fi
        fi
    done;
    echo "All sims have stopped."
}

do_restart() {
    # Phase 1: Alert
    for simulator in ${OPENSIM_DIR}/sims-enabled/*; do
        simname=`basename ${simulator}`
        if [ -f "${simulator}/pid" ]; then
           if ps -p `cat "${simulator}/pid"` > /dev/null; then
               echo "[${simname}] Alerting (${ALERT_DELAY}s)"
               ${SIMCTL} alert ${simname} "$MSG_REGION_RESTART"
           fi
        fi
    done;
    echo "Pausing (${ALERT_DELAY}s) before stopping sims"
    sleep ${ALERT_DELAY}
    # Phase 2: Stop
    for simulator in ${OPENSIM_DIR}/sims-enabled/*; do
        simname=`basename ${simulator}`
        if [ -f "${simulator}/pid" ]; then
           if ps -p `cat "${simulator}/pid"` > /dev/null; then
               echo "[${simname}] Stopping (${STOP_DELAY}s)"
               ${SIMCTL} stop ${simname}
           fi
        fi
    done;
    echo "Pausing (${STOP_DELAY}s) before starting sims"
    sleep ${STOP_DELAY}
    # Phase 3: Start
    for simulator in ${OPENSIM_DIR}/sims-enabled/*; do
        simname=`basename ${simulator}`
        if [ -f "${simulator}/pid" ]; then
           if ps -p `cat "${simulator}/pid"` > /dev/null; then
               # Kill it in case it was stuck
               echo "[${simname}] Killing (unclean shutdown)"
               ${SIMCTL} kill ${simname}
           fi
        fi
        echo "[${simname}] Starting (${START_DELAY}s)"
        ${SIMCTL} start ${simname}
        sleep ${START_DELAY}
    done;
    echo "All sims have been restarted."
}

do_reload() {
    for simulator in ${OPENSIM_DIR}/sims-enabled/*; do
        simname=`basename ${simulator}`
        if [ -f "${simulator}/pid" ]; then
           if ps -p `cat "${simulator}/pid"` > /dev/null; then
               # Alert
               echo "[${simname}] Alerting (${ALERT_DELAY}s)"
               ${SIMCTL} alert ${simname} "$MSG_REGION_RESTART"
               sleep ${ALERT_DELAY}
               # Stop
               echo "[${simname}] Stopping (${STOP_DELAY}s)"
               ${SIMCTL} stop ${simname}
               sleep ${STOP_DELAY}
               # Kill
               if [ -f "${simulator}/pid" ]; then
                   if ps -p `cat "${simulator}/pid"` > /dev/null; then
                       # Kill it in case it was stuck
                       echo "[${simname}] Killing (unclean shutdown)"
                       ${SIMCTL} kill ${simname}
                   fi
               fi
               # Start
               echo "[${simname}] Starting (${START_DELAY}s)"
               ${SIMCTL} start ${simname}
               sleep ${START_DELAY}
           else
               # Start crashed sim
               echo "[${simname}] Starting (${START_DELAY}s)"
               ${SIMCTL} start ${simname}
               sleep ${START_DELAY}
           fi
        else
           # Start non-running sim
           echo "[${simname}] Starting (${START_DELAY}s)"
           ${SIMCTL} start ${simname}
           sleep ${START_DELAY}
        fi
    done;
    echo "All sims have been reloaded."
}

do_status() {
    for simulator in ${OPENSIM_DIR}/sims-enabled/*; do
        simname=`basename ${simulator}`
        ${SIMCTL} status ${simname}
    done;
}

case "$1" in
    start)
        echo "Starting all sims delayed"
        do_start
        ;;
    stop)
        echo "Stopping all sims"
        do_stop
        ;;
    restart)
        echo "Restarting all sims delayed"
        time do_restart
        ;;
    reload)
        echo "Reloading all sims delayed"
        time do_reload
        ;;
    status)
        do_status
        ;;
    *)
        show_help
        exit 1
        ;;
esac

rm ${SIMAUTO_LOCK}
